use crate::syntax::surf::{Expr, Decl, Param, Data, Func, NamedTele};
use crate::syntax::{Ident, Universe, Loc, Plicitness::*};
use crate::token::Token;
use vec1::Vec1;

grammar<'input>;

Ident: Ident = <l: @L> <s: "ident"> <r: @R> => Ident::new(s, Loc::new(l, r));

extern {
    type Location = usize;

    enum Token<'input> {
        "ident" => Token::Ident(<&'input str>),
        "universe" => Token::Universe(<&'input str>),
        "metaident" => Token::MetaIdent(<&'input str>),
        "forall" => Token::Pi,
        "exists" => Token::Sigma,
        "data" => Token::Data,
        "codata" => Token::Codata,

        "@" => Token::At,
        ":" => Token::Colon,
        "," => Token::Comma,
        "." => Token::Dot,
        "=>" => Token::DArrow,
        ":=" => Token::Assignment,
        "lam" => Token::Lam,
        "fn" => Token::Let,
        "|" => Token::Pipe,
        "->" => Token::RArrow,
        "_" => Token::Underscore,

        "{" => Token::LBrace,
        "[" => Token::LBracket,
        "(" => Token::LParen,

        "}" => Token::RBrace,
        "]" => Token::RBracket,
        ")" => Token::RParen,
    }
}

#[inline]
Sp<Rule>: (Rule, Loc) =
    <l: @L> <rule: Rule> <r: @R> => (rule, Loc::new(l, r));

#[inline]
Sp_<Rule>: Loc =
    <sp: Sp<Rule>> => match sp { (_, loc) => loc };

Universe: Universe =
    <uni: "universe"> => {
        let uni_lvl = &uni[4..]; // Skip "Type" prefix
        let level = if !uni_lvl.is_empty() {
            uni_lvl.parse::<u32>().expect("the number is always valid, because we used regex [0-9]*; qed")
        } else {
            0
        };
        Universe(level)
    };

AtomExpr: Expr = {
    <uni: Sp<Universe>> => {
        let (uni, loc) = uni;
        Expr::Universe(loc, uni)
    },
    Sp_<"_"> => Expr::Hole(<>),
    <var: Ident> => Expr::Var(var),
    "(" <Expr> ")",
};

AppExpr : Expr = {
    AtomExpr,
    <f: AtomExpr> <args: AtomExpr+> => Expr::App(Box::new(f), Vec1::try_from_vec(args).unwrap()),
}

ForallParam : Vec1<Param> = {
    "(" <idents: Ident+> ":" <ty : Expr> ")" => Vec1::try_from_vec(idents.into_iter().map(|ident| Param::new(ident, ty.clone(), Explicit)).collect()).unwrap()
}

LamParam : Vec1<Param> = {
    <ident: Ident> => Vec1::new(Param::from_ident(ident, Explicit)),
    "(" <idents: Ident+> ":" <ty : Expr> ")" => Vec1::try_from_vec(idents.into_iter().map(|ident| Param::new(ident, ty.clone(), Explicit)).collect()).unwrap()
}

LamParams : Vec1<Param> = {
    <ident: Ident> ":" <ty : Expr> => Vec1::new(Param::new(ident, ty, Explicit)),
    <LamParam+> => Vec1::try_from_vec(<>.into_iter().flatten().collect()).unwrap()
}

Lam : Expr = {
    "lam" <params: LamParams> "=>" <body: Expr> => {
        Expr::Lam(params, box body)
    },
}

ForallParams : Vec1<Param> = {
    <ForallParam+> => Vec1::try_from_vec(<>.into_iter().flatten().collect()).unwrap()
}

Pi : Expr = {
    <l: AtomExpr> "->" <r: Expr> => Expr::Pi(Vec1::new(Param::from_type(l, Explicit)), Box::new(r)),
    "forall" <params: ForallParams> "," <body: Expr> => {
        Expr::Pi(params, Box::new(body))
    },
}

pub Expr: Expr = {
    Pi,
    Lam,
    AppExpr,
}

TypeParam: Param = {
    "(" <name: Ident> ":" <e: Expr> ")" => Param::new(name, e, Explicit),
    <AtomExpr> => Param::from_type(<>, Explicit),
}

Constructor: NamedTele = {
    "|" <name: Ident> <params: TypeParam*> => NamedTele::new(name, params.into()),
}

FnType: Expr = {
    ":" <Expr>
}

DataType: Universe = {
    ":" <Universe>
}

pub Decl: Decl = {
    "fn" <name: Ident> <params: TypeParam*> <ret_ty: FnType?> ":=" <body: Expr> => {
       Func { name, params: params.into(), ret_ty, body }.into()
    },
    "data" <name: Ident> <ty_params: TypeParam*> <universe: DataType?> <cons: Constructor*> => {
      Data { sig: NamedTele::new(name, ty_params.into()), universe, cons }.into()
    },
}

pub Prog : Vec<Decl> = {
    <Decl*>
}
